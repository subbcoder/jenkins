pipeline {
    agent any

    environment {
        SITE_NAME = 'api.subbnet.ru'
        URLS_NAME = 'http://0.0.0.0:5000'
    }
    
    stages {
        
        stage ('Очистить рабочее пространство') { 
            steps { 
                sh "hostname"
                sh "uptime"
                cleanWs() 
            } 
        }

        stage('Загрузка с github') {
            steps {
                git branch: 'master',
                credentialsId: 'github-ssh-key', 
                url: 'git@github.com:subbcoder/api.subbnet.ru.git'
            }
        }
        
        stage('Список загруженных файлов') {           
            steps {
                sh "ls -lat"                
            }
        }
        
        stage('Restore') {
            steps {
                sh 'dotnet restore'
            }           
        }
        
         stage('Build dotnet') {
            steps {
                sh 'dotnet build -c Release'
            }           
        }       
        
        stage('Publish') {
            steps {
                echo "Проект собран"
                sh 'dotnet publish -c Release -o publish'
            }           
        }    
        
        stage('Get cert') {
            steps {
                 sh 'sudo -S scp -rC root@10.10.11.18:/etc/letsencrypt/live/api.subbnet.ru/ /etc/nginx/cert/'
            }           
        }        
        
        stage ('Deploy') {
            steps {
                // Вы можете сделать после добавленияв NOPASSWD этого пользователя в /etc/sudoers
                // jenkins ALL=(ALL) NOPASSWD: ALL

                writeFile(file: "${SITE_NAME}.conf", text: 
"""server {
    listen 80;
    server_name ${SITE_NAME};
    location / {
        #proxy_http_version 1.1;
        #proxy_set_header Upgrade \$http_upgrade;
        #proxy_set_header Connection keep-alive;
        #proxy_set_header Host \$host;
        #proxy_cache_bypass \$http_upgrade;
        proxy_pass ${URLS_NAME};
    }
}
server {
    listen 443 ssl http2;
    server_name ${SITE_NAME};
    location / {
        proxy_pass ${URLS_NAME};
        proxy_redirect off;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host \$server_name;
    }
    proxy_connect_timeout 900;
    proxy_send_timeout 900;
    proxy_read_timeout 900;
    send_timeout 900;
    access_log /var/log/nginx/localhost-access.log;
    error_log /var/log/nginx/localhost-error.log;
    ssl on;
    ssl_certificate /etc/nginx/cert/api.subbnet.ru/cert.pem;
    ssl_certificate_key /etc/nginx/cert/api.subbnet.ru/privkey.pem;
    ssl_trusted_certificate /etc/nginx/cert/api.subbnet.ru/chain.pem;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    #ssl_dhparam /etc/ssl/certs/dhparam.pem;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;
    add_header Strict-Transport-Security max-age=15768000;
}"""
                , encoding: "UTF-8")
                
                sh "sudo -S chown -R root:root ${SITE_NAME}.conf"
                sh "sudo -S cp ${SITE_NAME}.conf /etc/nginx/conf.d/${SITE_NAME}.conf"   
                
                
                script {
                    def NginxIsRunning = sh(script:'sudo -S systemctl is-active --quiet nginx  && echo Running', returnStdout:true).trim()

                    if (NginxIsRunning == 'Running') {
                        sh "sudo -S systemctl stop nginx"
                    } else {
                        echo 'Nginx not running'
                    }
                }
                
                script {
                    def MyServiceIsRunning = sh(script:'sudo -S systemctl is-active --quiet ${SITE_NAME}.service && echo Running', returnStdout:true).trim()

                    if (MyServiceIsRunning == 'Running') {
                        // Стопим сервис
                        sh "sudo -S systemctl stop ${SITE_NAME}"
                        // Удаляем сервис из загрузки
                        sh "sudo -S systemctl disable ${SITE_NAME}"
                    } else {
                        echo 'MyServiceIsRunning not running'
                    }
                }                

                writeFile(file: "${SITE_NAME}.service", text: 
"""[Unit]
Description=${SITE_NAME}

[Service]
WorkingDirectory=/var/lib/jenkins/workspace/${SITE_NAME}_Job/publish
ExecStart=/usr/bin/dotnet /var/lib/jenkins/workspace/api.subbnet.ru_Job/publish/${SITE_NAME}.dll --urls=${URLS_NAME}
Restart=always
RestartSec=30
SyslogIdentifier=${SITE_NAME}
User=root
Environment=ASPNETCORE_ENVIRONMENT=Production
Environment=DOTNET_PRINT_TELEMETRY_MESSAGE=false

[Install]
WantedBy=multi-user.target"""
                , encoding: "UTF-8")
                
                sh "sudo -S chown -R nginx:nginx ${SITE_NAME}.service"
                sh "sudo -S cp ${SITE_NAME}.service /etc/systemd/system/${SITE_NAME}.service"                
                
                sh "sudo -S chown -R nginx:nginx /var/lib/jenkins/workspace/${SITE_NAME}_Job/publish/*"
                sh "sudo -S systemctl enable ${SITE_NAME}"                

                sh "sudo -S systemctl start ${SITE_NAME}"
                sh "sudo -S systemctl start nginx"
                
                sh "uptime"
                
            }
        }

    }
}
